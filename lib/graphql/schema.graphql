"""
Represents the nutritional information for a recipe.
"""
type Nutritions {
  fat: String
  protein: String
  carbohydrates: String
}

"""
Represents a single recipe with all its details.
"""
type Recipe {
  id: ID!
  recipeName: String!
  servings: String
  description: String
  ingredients: [String!]!
  procedure: String
  estimatedTime: String
  calories: String
  nutritionalInfo: Nutritions
  vegan: Boolean
  categories: [String!]!
}

"""
A wrapper for a Recipe that includes details about how well it matches
a given set of ingredients.
"""
type RecipeMatch {
  recipe: Recipe!
  matchPercentage: Int!
  matchingIngredientsCount: Int!
  totalIngredientsCount: Int!
  missingIngredients: [String!]!
}

"""
A wrapper for a Recipe that includes a relevance score from a full-text search.
"""
type RankedRecipe {
  recipe: Recipe!
  relevanceScore: Float!
}

# --- NEW: A type to bundle all data needed for the home screen ---
"""
Contains curated data perfect for displaying on a home screen.
"""
type HomeScreen {
  recipeOfTheDay: Recipe
  featuredRecipes: [Recipe!]!
  popularCategories: [String!]!
}

"""
Input type for filtering recipes by vegan status or category.
"""
input RecipeFilters {
  vegan: Boolean
  categories: [String!]
}

"""
Defines all the queries available to the client.
"""
type Query {
  # --- NEW: A single query to get all home screen data ---
  getHomeScreenData: HomeScreen!

  """
  Finds recipes that belong to ANY of the specified categories.
  """
  findRecipesByCategories(
    categories: [String!]!
    filters: RecipeFilters
  ): [Recipe!]!

  """
  FINDS RECIPES YOU CAN MAKE RIGHT NOW (100% ingredient match).
  Slow on large datasets, but very accurate.
  """
  recipesWithExactIngredients(
    availableIngredients: [String!]!
    filters: RecipeFilters
  ): [Recipe!]!

  """
  FINDS RECIPES YOU CAN ALMOST MAKE (match percentage).
  The most useful query for users.
  """
  recipesByIngredientMatch(
    availableIngredients: [String!]!
    minMatchPercentage: Int = 80
    filters: RecipeFilters
  ): [RecipeMatch!]!

  """
  Finds recipes that contain ALL of the specified ingredient names (e.g., "chicken" AND "rice").
  """
  findRecipesByIngredientNames(
    ingredientNames: [String!]!
    filters: RecipeFilters
  ): [Recipe!]!

  """
  Uses a performant full-text search. Good for a primary search bar.
  """
  recipesWithFullTextSearch(
    availableIngredients: [String!]!
    filters: RecipeFilters
  ): [RankedRecipe!]!

  """
  Finds recipes using smart matching with common substitutions.
  """
  recipesWithSmartMatching(
    availableIngredients: [String!]!
    minMatchPercentage: Int = 50
    filters: RecipeFilters
  ): [RecipeMatch!]!

  """
  Gets quick recipe suggestions that contain at least one of the ingredients.
  """
  quickRecipeSuggestions(
    availableIngredients: [String!]!
    limit: Int = 10
    filters: RecipeFilters
  ): [Recipe!]!
}

# --- MUTATIONS ---

"""
Input for the nutritional information.
"""
input NutritionsInput {
  fat: String
  protein: String
  carbohydrates: String
}

"""
Input type for creating a new recipe. Bundles all required fields.
"""
input CreateRecipeInput {
  recipeName: String!
  servings: String
  description: String
  ingredients: [String!]!
  procedure: String
  estimatedTime: String
  calories: String
  nutritionalInfo: NutritionsInput
  vegan: Boolean
  categories: [String!]!
}

"""
Input type for updating an existing recipe. All fields are optional.
"""
input UpdateRecipeInput {
  recipeName: String
  servings: String
  description: String
  ingredients: [String!]
  procedure: String
  estimatedTime: String
  calories: String
  nutritionalInfo: NutritionsInput
  vegan: Boolean
  categories: [String!]
}

"""
Defines all the mutation operations for creating, updating, and deleting data.
"""
type Mutation {
  """
  Creates a new recipe and returns the created recipe.
  """
  createRecipe(input: CreateRecipeInput!): Recipe!

  """
  Updates an existing recipe by its ID and returns the updated recipe.
  """
  updateRecipe(id: ID!, input: UpdateRecipeInput!): Recipe

  """
  Deletes a recipe by its ID and returns the recipe that was deleted.
  """
  deleteRecipe(id: ID!): Recipe
}
